  Future<void> loadModel() async {
    interpreter = await Interpreter.fromAsset('assets/ResNet152V2.tflite');
    final labelsData = await DefaultAssetBundle.of(context)
        .loadString('assets/tww_labels.txt');
    labels = labelsData.split('\n');
    print("Model and labels loaded successfully");
  }

  Future<List<List<List<int>>>> preprocessImage(File imageFile) async {
    final image = img.decodeImage(imageFile.readAsBytesSync());
    final resizedImage = img.copyResize(image!, width: 224, height: 224);

    // Convert grayscale to a 3-channel image if the model expects RGB
    final List<List<List<int>>> input = List.generate(
        224,
        (i) => List.generate(
            224,
            (j) => [
                  img.getLuminance(resizedImage.getPixel(i, j)).toInt(),
                  img.getLuminance(resizedImage.getPixel(i, j)).toInt(),
                  img.getLuminance(resizedImage.getPixel(i, j)).toInt()
                ]));

    return input;
  }

    void classifyImage() async {
    Position pos = await _determinePosition();

    //randomize the position by 500 meters
    pos = randomizePosition(pos, 500);

    classificatoinMap = {
      'primaryClassification': 'Flagstaff',
      'allClassificatoins': {
        'Kana\'a': 0.23,
        'Black Mesa': 0.01,
        'Sosi': 0.20,
        'Dogoszhi': 1.2,
        'Flagstaff': 0.65,
        'Tuysayan': 2.3,
        'Kayenta': 4.5,
      },
      'lattitude': pos.latitude,
      'longitude': pos.longitude,
    };

    setState(() {
      currentPosition = pos;
      classificaitonData =
          "Flagstaff: Confidence 0.123\nBlack Mesa: Confidence 0.123\nKnaa: Confidence 0.123";
    });

    // TODO: implement classification model
    var preprocessedImage = await preprocessImage(selectedImage!);

    // Initialize output buffer with correct shape
    var output = List.filled(1 * 7, 0).reshape([1, 7]);

    var input = [preprocessedImage];

    print('\n\n\n Tensor:');

    interpreter.run(input, output);

    // Extract the [7] array from [1, 7]
    print('Classification Data: ${output[0]}');
  }